<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Strategy Animation</title>
    <style>
        body {
            margin: 0;
            background: #101032;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        canvas {
            display: block;
            width: 600px;
            height: 600px;
        }
    </style>
</head>
<body>
    <canvas id="strategyCanvas" width="600" height="600"></canvas>
    <script>
        const canvas = document.getElementById("strategyCanvas");
        const ctx = canvas.getContext("2d");
        canvas.width = 600;
        canvas.height = 600;

        let nodes = [];
        let connections = [];
        let centerX = canvas.width / 2;
        let centerY = canvas.height / 2;

        class Node {
            constructor(x, y, size, color) {
                this.x = x;
                this.y = y;
                this.size = size;
                this.color = color;
                this.angle = Math.random() * Math.PI * 2;
                this.radius = Math.random() * 200 + 100;
                this.speed = Math.random() * 0.003 + 0.0008;
                this.orbitOffset = Math.random() * Math.PI * 2;
            }
            update() {
                this.angle += this.speed;
                this.x = centerX + Math.cos(this.angle + this.orbitOffset) * this.radius;
                this.y = centerY + Math.sin(this.angle + this.orbitOffset) * this.radius;
            }
            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.fill();
            }
        }

        class Connection {
            constructor(start, end) {
                this.start = start;
                this.end = end;
            }
            draw() {
                ctx.beginPath();
                ctx.moveTo(this.start.x, this.start.y);
                ctx.lineTo(this.end.x, this.end.y);
                ctx.strokeStyle = "rgba(255, 255, 255, 0.5)";
                ctx.lineWidth = 1;
                ctx.stroke();
            }
        }

        function createNodes() {
            let colors = ["#FF5733", "#33FF57", "#3357FF", "#F4D03F", "#9B59B6"];
            for (let i = 0; i < 10; i++) {
                let color = colors[i % colors.length];
                nodes.push(new Node(centerX, centerY, 6, color));
            }
        }

        function createConnections() {
            nodes.forEach((node, index) => {
                for (let i = index + 1; i < nodes.length; i++) {
                    connections.push(new Connection(node, nodes[i]));
                }
            });
        }

        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            nodes.forEach(node => {
                node.update();
                node.draw();
            });

            connections.forEach(connection => {
                connection.draw();
            });
            
            requestAnimationFrame(animate);
        }

        createNodes();
        createConnections();
        animate();
    </script>
</body>
</html>
